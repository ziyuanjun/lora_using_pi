* 在 pi 中运行 loragateway 和 pkt_fwd
  1. sudo raspi-config
     1 Expand Filesystem ,扩展文件系统；
     9 Advanced Options, SPI,默认开启SPI；
     配置完重启，检查是否配置成功
     $ls /dev/spi* 
     // /dev/spidev0.0  /dev/spidev0.1, 则配置成功

     raspi-config配置SPI失败时可以通过修改 ~/boot/config.txt~ 来打开SPI:
     http://www.jianshu.com/p/47258276645f

  2. 下载源文件并编译
     #+BEGIN_SRC sh
     git clone https://github.com/Lora-net/lora_gateway.git
     git clone https://github.com/Lora-net/packet_forwarder.git
     cd lora_gateway && make
     cd packet_forwarder && make
     #+END_SRC

  3. 配置global_conf local_conf
     scp 拷贝文件：
     scp 文件名用户名@计算机IP或者计算机名称:远程路径
     scp 用户名@计算机IP或者计算机名称:文件名本地路径

     扫描IP地址：
     #+BEGIN_SRC sh
     nmap -sP 192.168.1.0/24　
     #+END_SRC

     #+BEGIN_SRC sh
     ln -sf rhf_json_files/global_conf_cn470.json global_conf.json
     ln -sf rhf_json_files/local_conf.json local_conf.json
     #+END_SRC
  4. 运行
     运行 `reset_lgw`, 此步不可省！
     #+BEGIN_SRC sh
     cd lora_gateway
     ./reset_lgw.sh start
     #+END_SRC

     运行 lora_pkt_fwd: 
     #+BEGIN_SRC sh
     cd packet_forwarder/lora_pkt_fwd
     ./lora_pkt_fwd
     #+END_SRC


* 使用 MQTT
** 选择合适的MQTT客户端的C语言实现
*** eclipse
    https://eclipse.org/paho/clients/c/

**** 安装步骤

     #+BEGIN_SRC sh
     git clone https://github.com/eclipse/paho.mqtt.c.git
     cd paho.mqtt.c
     make
     #+END_SRC

     make 出错缺少 openssl

*** mosquitto
    https://mosquitto.org/download/
    
**** 安装步骤
     - win
       http://www.steves-internet-guide.com/install-mosquitto-broker/
     - ubuntu安装(非源码安装)
        https://howtoprogram.xyz/2016/10/15/install-mosquitto-mqtt-broker-ubuntu-16-04-lts-xenial-xerus/
        #+BEGIN_SRC sh
        sudo add-apt-repository ppa:mosquitto-dev/mosquitto-ppa
        sudo apt-get update
        sudo apt-get install mosquitto
        sudo apt-get install mosquitto-clients
        #+END_SRC

       上述方式后， mosquitto 似乎并没有成功安装，使用如下命令安装成功：
        #+BEGIN_SRC sh
        sudo apt install mosquitto
        sudo apt install mosquitto-clients
        #+END_SRC

        安装成功后测试：
       - Checking status of the broker
         #+BEGIN_SRC sh
         sudo /etc/init.d/mosquitto status
         #+END_SRC
       - Starting the Mosquitto broker
         #+BEGIN_SRC sh
         sudo /etc/init.d/mosquitto start
         #+END_SRC
       - Stopping the broker
         #+BEGIN_SRC sh
         sudo /etc/init.d/mosquitto stop
         #+END_SRC
     - pi安装(源码安装)
       #+BEGIN_SRC sh
       wget http://mosquitto.org/files/source/mosquitto-1.4.14.tar.gz
       tar -xzvf mosquitto-1.4.14.tar.gz
       cd mosquitto-1.4.14
       #+END_SRC

       此时make 会出错：
       #+BEGIN_QUOTE
       fatal error: openssl/ssl.h: 没有那个文件或目录
       #+END_QUOTE
       解决方式：
       #+BEGIN_SRC sh
       sudo apt-get install libssl-dev
       #+END_SRC

        报错：
       #+BEGIN_QUOTE
       fatal error: ares.h: 没有那个文件或目录
       #+END_QUOTE
       解决方式：
       #+BEGIN_SRC sh
       sudo apt-get install libc-ares-dev
       #+END_SRC
        报错：
       #+BEGIN_QUOTE
       fatal error: uuid/uuid.h: 没有那个文件或目录
       #+END_QUOTE
       解决方式：
       #+BEGIN_SRC sh
       sudo apt-get install uuid-dev
       #+END_SRC
      

       #+BEGIN_SRC sh
       make
       sudo make install
       #+END_SRC


**** 在C语言中使用 mosquitto
     https://mosquitto.org/man/libmosquitto-3.html
     保存例子的代码为 mosquitto_test.c , 然后编译：
     #+BEGIN_SRC sh
     gcc -c mosquitto_test.c
     #+END_SRC
     竟然报错，找不到 mosquitto.h 文件。

     1. 下载源码 make
        源码编译中会遇到一些问题，可参考[[http://www.cnblogs.com/littleatp/p/4835879.html][此文]]。

        #+BEGIN_QUOTE
        ares.h: No such file or directory compilation terminated.
        #+END_QUOTE
        [[https://answers.launchpad.net/mosquitto/+question/266465][解决方法]]:
        #+BEGIN_SRC sh
        sudo apt-get install libc-ares-dev
        #+END_SRC

        #+BEGIN_QUOTE
        openssl/ssl.h: No such file or directory
        #+END_QUOTE
        [[http://blog.csdn.net/cos_sin_tan/article/details/8140779][解决方法]]:
        找到已有的 openssl/ssl.h 的位置，将其拷贝至 include 路径：
        #+BEGIN_SRC sh
        sudo cp -r ~/anaconda2/include/openssl /usr/include/
        #+END_SRC

        #+BEGIN_QUOTE
        libwebsockets.h: No such file or directory compilation terminated.
        #+END_QUOTE
        解决方法：
        #+BEGIN_SRC sh
        wget https://github.com/warmcat/libwebsockets/archive/v1.3-chrome37-firefox30.tar.gz
        tar zxvf v1.3-chrome37-firefox30.tar.gz
        cd libwebsockets-1.3-chrome37-firefox30
        mkdir build; cd build;
        cmake .. -DLIB_SUFFIX=64
        make install
        #+END_SRC
        安装完后就能通过
        #+BEGIN_SRC sh
        find libwebsockets / | grep libwebsockets.h
        #+END_SRC
        发现 libwebsockets.h 的位置：
        /usr/local/include/libwebsockets.h
        可以想象，如果 mosquitto 编译成功，相应的 .h 文件也就能进入 include 路径了。这个路径在 config.mk 中是有设置的：
        即prefix=/usr/local。

        再次编译 mosquitto, 还是报错：
        #+BEGIN_QUOTE
        loop.c:492:22: error: storage size of ‘wspoll’ isn’t known struct lws_pollfd wspoll;
        #+END_QUOTE
        可能是没有 uuid, [[https://stackoverflow.com/questions/1089741/how-do-i-obtain-use-libuuid][ubuntu 下安装 libuuid]]:
        #+BEGIN_SRC sh
        sudo apt-get install uuid-dev
        #+END_SRC
        安装后依然无效。
        这似乎是一个 bug, [[https://github.com/eclipse/mosquitto/issues/496][参见github]]， 于是果断把设WITH_WEBSOCKETS 为no, 然后 make clean; make; 成功！
        这时已经能在路径/usr/local/include/下发现 mosquitto.h 文件了。

        另 [[https://goochgooch.wordpress.com/2014/08/01/building-mosquitto-1-4/][ubuntu的踩坑1]], [[https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-ubuntu-16-04][坑2]] 。编译成功后还需要[[mqtt_config][配置]]。
     2. 编译例子
        #+BEGIN_SRC sh
        gcc -c mosquitto_test.c
        #+END_SRC
        报warning, 而
        #+BEGIN_SRC sh
        gcc mosquitto_test.o -o mosquitto_test
        #+END_SRC
        却报错：
        #+BEGIN_QUOTE
        mosquitto_test.o: In function `my_connect_callback':
        mosquitto_test.c:(.text+0x9f): undefined reference to `mosquitto_subscribe'
        mosquitto_test.o: In function `main':
        mosquitto_test.c:(.text+0x19b): undefined reference to `mosquitto_lib_init'
        mosquitto_test.c:(.text+0x1b0): undefined reference to `mosquitto_new'
        mosquitto_test.c:(.text+0x1f4): undefined reference to `mosquitto_log_callback_set'
        mosquitto_test.c:(.text+0x205): undefined reference to `mosquitto_connect_callback_set'
        mosquitto_test.c:(.text+0x216): undefined reference to `mosquitto_message_callback_set'
        mosquitto_test.c:(.text+0x227): undefined reference to `mosquitto_subscribe_callback_set'
        mosquitto_test.c:(.text+0x23d): undefined reference to `mosquitto_connect'
        mosquitto_test.c:(.text+0x27c): undefined reference to `mosquitto_loop_forever'
        mosquitto_test.c:(.text+0x288): undefined reference to `mosquitto_destroy'
        mosquitto_test.c:(.text+0x28d): undefined reference to `mosquitto_lib_cleanup'
        collect2: error: ld returned 1 exit status
        #+END_QUOTE
        +我怀疑这个例子的正确性！这个例子可能是在 windows 系统中运行的。+

        [[https://stackoverflow.com/questions/19707329/how-to-compile-using-libmosquitto][正确答案]] 是要使用动态链接：
        #+BEGIN_SRC sh
        gcc mosquito.c -lmosquitto -o mosquito
        # or
        gcc mosquito.c -o mosquito -lmosquitto
        # or
        gcc -o mosquito mosquito.c -lmosquitto
        #+END_SRC
        解析：
        -lmosquitto 告诉编译器要链接 libmosquitto 库，编译器默认会找的目录可以用gcc -print-search-dirs 查看（其中的 libraries 就是库文件的搜索路径列表,各路径之间用 : 号隔开），可以看到有 /usr/local/lib , libmosquitto.so 就在该目录下。对于-lmosquitto, 编译器会首先找有没有共享库 libstack.so ,如果有就链接它,如果没有就找有没有静态库 libstack.a ,如果有就链接它。所以编译器是优先考虑共享库的,如果希望编译器只链接静态库,可以指定 -static 选项。

***** pi 中使用 mosquito
      在 pi 中重复上述步骤，出现如下问题：
      1. 编译成功，但运行时报错
         "Can't initialize Mosquitto library"

         解决：
         运行 gcc -print-search-dirs 发现路径中不包含 /usr/local/lib, 于是修改 Makefile 文件使用 -I 选项加入该路径。

      2. 加入 库路径后，编译成功，但运行时报错：
         Can't connect to Mosquitto server

         应该是 mosquito 服务没有运行起来。通过[[https://goochgooch.wordpress.com/2014/08/01/building-mosquitto-1-4/][ubuntu的踩坑1]] 发现源码安装后，还有一个重要的步骤，就是配置！<<mqtt_config>>
         #+BEGIN_SRC sh
         sudo vi /etc/mosquitto/mosquitto.conf
         sudo useradd -r -m -d /var/lib/mosquitto -s /usr/sbin/nologin -g nogroup mosquitto
         #+END_SRC
         上面的 vi 操作只是创建了一个空文件。然后用下面的命令启动 :
         #+BEGIN_SRC sh
         sudo /usr/local/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf
         #+END_SRC












**** more example
     Getting Started with MQTT
     https://spin.atomicobject.com/2014/03/19/mqtt-protocol-ethernet/

     Writing an MQTT client C for ActiveMQ from the ground up
     http://www.kevinboone.net/mosquitto-test.html

     Sending and Receiving Messages with MQTT
     使用 python,还安装了 paho.mqtt
     http://www.ev3dev.org/docs/tutorials/sending-and-receiving-messages-with-mqtt/

**** 实践
     [[https://mosquitto.org/api/index/Functions.html][mosquito API]]

* 备忘 :secret:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2

jA0EBwMC8zSXGRaRECbk0sB/AcsUqPslprbHoHRQ5GPC0Qu3eZJT6wiJKPJTA7u7
6tMjxejzM21We1hTnp/3pv4s+cKfA2QvoG/l4x8ZMQw4WrCysJgESbODkXf0PkRd
sTVqPLKZTYyAiLKRn2iChVrWil3S1Wfpf+eTxFOGnFU6JMyL3Pp3lTq0+BBkBj+6
+lUXQvalaKMBrp/NFsyghKL9hlz1EQzizXLKD3g4CbIRwqmdWHhDy467FEAtCyoP
xaeQX5gWR6DjaxsD2nuzOBq5rYK597XEPDnByrJN+7TWsK1oJhIu1rrh1cWRJGyZ
sm2NA2H6cXwpc9HBXpWIgZ++21u3ph6bx1uY6dDldfy+zxfZdTwfnko+4Lr5uT87
gHtSWkqrZh1hbMHQJvtsI9r1ZasLL6wbND9mvMidHDzxx8Oe9mPX0I9xVOAXPwZT
pw==
=xu+R
-----END PGP MESSAGE-----
