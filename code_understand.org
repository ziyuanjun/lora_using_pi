* 分析 lora_pkt_fwd.c 的流程：

** main()
   - 解析配置文件
     - 1301
     - gateway
     - lora_cfg
     - gps (if exist)
     同时完成设置
   - 设置时区
   - 建立 UDP 连接
     - sockt_up
     - sockt_down
   - 启动 lgw [[lgw_start()]]
   - 建立 [[thread_up(void)][up 线程]]
     sockt_up
   - 建立 [[thread_down(void)][down 线程]]
   - 建立 [[thread_jit(void)][jit 线程]]
   - 建立 timersync 线程
   - 建立 gps 线程 (if exist)
     - 建立 timersync 线程
   - 注册信号 (linux 系统信号)
   - *进入循环*：
     - 等待
     - 获得时间
     - 统计 upstream 数据包，并对计数清零
     - 统计 downstrean 数据包，并对计数清零
     - 统计 gps 数据包，并对计数清零
     - 打印报告
     - 获得时间戳
     - 打印 jit 报告
     - 打印 gps 报告
     - 生成 JSON 报告，发送到 server
   - 结束 up 线程
   - 结束 down 线程
   - 结束 jit 线程
   - 结束 timesync 线程
   - 结束 gps 线程

** thread_up(void)
   - 分配 buffer 空间：
     - uint8_t buff_up[TX_BUFF_SIZE]
       uint8_t buff_ack[32]

   - 设置 sockt_up RX timeout
   - 填充 data buffer 中值为固定值的部分
     - 协议版本、MAC 地址
   - *进入循环*:
     - 接收packets [[lgw_recive()][lgw_receive()]], 根据返回值得到了 pkt 数量
     - 满足如下条件，跳出循环：
       - [[lgw_recive()][lgw_receive()]] 返回 -1
     - check if there are status report to send
     - wait 10ms if no packets or no status report. 并且*continue*
     - get a copy of GPS time reference
     - 构建数据报报头
     - 构建JSON structure
     - serialize Lora packets metadata and payload *逐个* pkt 完成如下操作：
       - Get mote information from current packet (addr, fcnt)
       - basic packet filtering
       - 如果 pkt 的CRC不正常跳过当前 pkt
       - Start of packet, add inter-packet separator if necessary
       - RAW timestamp, 8-17 useful chars
       - Packet RX time (GPS based), 37 useful chars
       - Packet concentrator channel, RF chain & RX frequency, 34-36 useful chars
       - Packet status, 9-10 useful chars
       - Packet modulation, 13-14 useful chars
       - Packet RSSI, payload size, 18-23 useful chars
       - Packet base64-encoded payload, 14-350 useful chars
       - End of packet serialization
     - 如果所有 pkt 都被过滤了，且不需报告（发送JSON），则 *continue*
     - 加入结束符： ']' ,如需报告，继续加分割符 ','
     - add status report if a new one is available
     - end of JSON datagram payload
     - send datagram to server
     - wait for acknowledge (in 2 times, to catch extra packets)
       从 sockt_up 接收数据
       使用系统函数 clock_gettime 记录接收时间 recv_time
   - 打印线程结束提示 

** thread_down(void)
   PULLING SERVER AND ENQUEUING PACKETS IN JIT QUEUE 
   - 分配 buffer 空间：
     - uint8_t buff_down[1000]
       uint8_t buff_req[12]
   - 设置 sockt_down RX timeout
   - 填充 data buffer 中值为固定值的部分
     - 协议版本、MAC 地址
   - beacon initialization 
   - 计算经纬度，填入 beacon_pkt.payload
   - RFU, 填入 beacon_pkt.payload
   - CRC, 填入 beacon_pkt.payload
   - JIT queue initialization
     [[jit_queue_init(*queue)][jit_queue_init]](&jit_queue)
   - *进入循环*:
     - 判断在若干次 PULL Data 无应答后，是否自动退出
     - 发送 PULL 请求并记录时间
       使用 sockt_down 发送 buff_req
       使用系统函数 clock_gettime 记录发送时间 send_time
       #+BEGIN_SRC C
       recv_time = send_time;
       #+END_SRC
     - 在接收时间窗口内*循环读 sockt_down 接收数据报*:
       - 尝试接收 sockt_down
         #+BEGIN_SRC C
         msg_len = recv(sock_down, (void *)buff_down, (sizeof buff_down)-1, 0);
         #+END_SRC
       - 更新接收时间
       - 逐个处理 jitqueue 中排队的 beacon, 处理条件：(beacon_loop && (beacon_period != 0))
         - 关于条件：
           - jitqueue 是3个一组进行排队的，任意时刻都有3(JIT_NUM_BEACON_IN_QUEUE)个 beacon 在排队
             #+BEGIN_SRC C
             beacon_loop = JIT_NUM_BEACON_IN_QUEUE - jit_queue.num_beacon;
             #+END_SRC
             jitqueue.num_beacon 应该在入队出队时发生改变
           - beacon_period 是等待时间，该值从 .json 文件中读到，但 global 和 local 都未设该值，应该没有读到，所以为0。
             因此程序未进入 jitqueue 排队处理
         - 将 beacon 入 jitqueue，处理条件：GPS准备好 && xtal[fn:1] error correction is OK.
           - 关于条件：设备并没有GPS, 进一步说明，没有 queue 处理。
             条件不满足就什么也不做
           - 计算下一个 beacon 到达的GPS 时间
               根据LoRaWAN 协议: T = k*beacon_period + TBeaconDelay。其中，TBeaconDelay = [1.5ms +/- 1µs]
             此处计算用到了 GPS 参考时钟：time_reference_gps, 这个时钟是在 GPS 线程中得到了校准的。
           - 将 GPS 时间转换为 concentrator time, 并给 JiT 设置 packet 计数器
           - 校正 beacon 的发送时间
           - 计算 beacon 的频率
           - 计算 CRC 使用函数 crc16()
           - Insert beacon packet in JiT queue
             get_concentrator_time
             jit_result = [[jit_enqueue()][jit_enqueue()]]
           - 如果 jit_result == JIT_ERROR_OK,则
             - update stats
             - beacon_loop--;
               retry = 0;
               gps 时间更新
             - display beacon payload
           - 否则
             update stats && retry++
       - 如果没有网络数据，continue, 继续尝试接收
       - 如果接收的网络数据长度不正常，直接忽略这些数据，continue, 继续尝试接收
       - 如果网络数据是一个 ACK 包，则进一步检查 token, 统计，continue, 继续尝试接收
       - 如果网络数据是一个 Pull 请求，则
         - 初始化接收结构
         - 尝试解析 JSON, 解析失败则continue
         - 查找 JSON 的 txpk 对象，未查到则 continue
         - 解析 时间标签，失败则 continue
         - 解析 "No CRC" 标签 (允许失败)
         - 解析目标频率 freq, 失败则 continue
         - 解析发射的 RF chain ,失败则 continue
         - 解析发射功率(允许失败)
         - 解析调制方式，失败则 continue
           - 调制方式有两种：LORA 和 FSK
         - 解析 payload 长度，失败则 continue
         - 解析 payload 数据，失败则 continue
         - 设置txpkt 的发射模式（即时 or 时间戳）
         - 计算统计值
         - 在将 packet 入队前，检查其合理性
           - 频率满足条件
           - 功率满足条件
         - 将要发射的packet 插入jitqueue 中
             get_concentrator_time
             jit_result = [[jit_enqueue()][jit_enqueue()]]
         - Send acknoledge datagram to server
           [[send_tx_ack()][send_tx_ack]] (buff_down[1], buff_down[2], jit_result);
           这个函数最终 [[file:~/Program/IoT/packet_forwarder-master/lora_pkt_fwd/src/jitqueue.c::971][调用了sock_down]] 的send 函数。
   - 打印线程结束提示 

** thread_jit(void)
- 进入循环
  - 等待10ms
  - 将 data 和 metadata 发送给 concentrator, 并安排发射日程
      gettimeofday(&current_unix_time, NULL);
      get_concentrator_time(&current_concentrator_time, current_unix_time);
      jit_result = [[jit_peek()][jit_peek]](&jit_queue, &current_concentrator_time, &pkt_index);
    - 如果 jit_result == JIT_ERROR_OK:
      - 如果 (pkt_index > -1)
        - jit_result = [[jit_dequeue()][jit_dequeue]](&jit_queue, pkt_index, &pkt, &pkt_type);
        - 如果 jit_result == JIT_ERROR_OK
          - 更新pkt 的必要信息
          - 检查 concentrator 是否可以发射，不满足发射条件 则 continue
          - 发射 pkt :  result = lgw_send(pkt)
          - 检查发射是否成功，并打印提示

** lgw_start()
   - 重启 lora concentrator
   - 重置 reg
   - 写 clocks
   - 打开、（等待0.5s）、重置射频（A & B)
   - 设置 radio 参数
   - 设置 AGC 控制
   - 配置 LBT
   - 启动 clocks
   - 校准
   - 加载固件校准参数
   - 移交控制权给 MCU
   - 发送校准字
   - 检查固件版本
   - 控制权交给 MCU
   - 校准
   - 等待 2.3s
   - 获得校准状态
   - 获得 TX DC offset
   - ..
   - GPS 使能
   - 等待 8.4s
   - 返回

** lgw_recive()
   函数传入最大要接收的 pkt 个数，以及 pkt 结构体数组指针
   - 下面情况返回 -1
     - concentrator 不正常运行
     - 输入参数不合理
   - 创建读取 SPI 的 buff 数组
   - Initialize buffer
   - 循环多次，次数为获得的 pkt 个数
     - fetch all the RX FIFO data, 数据读入buff的第0-5字节中
       [[lgw_reg_rb()][lgw_reg_rb]](LGW_RX_PACKET_DATA_FIFO_NUM_STORED, buff, 5)
       - 0:   number of packets available in RX data buffer 
       - 1,2: start address of the current packet in RX data buffer 
       - 3:   CRC status of the current packet 
       - 4:   size of the current packet payload in byte 
     - 满足以下条件，跳出循环：
       - buff[0]==0,表示读完FIFO 中所有 packets,
       - 数据无效
     - 将 buff 信息存入pkt_data 的第 n 个元素中
     - get payload + metadata
       [[lgw_reg_rb()][lgw_reg_rb]](LGW_RX_DATA_BUF_DATA, buff, buff[4]+RX_METADATA_NB);
     - 将 buff 信息存入pkt_data 的第 n 个元素的 payload 中 
     - process metadata (最多有10个 if chain)
     - 根据不同的 ifmod 完成
       - timestamp correction
       - RSSI correction
     - advance packet FIFO 
   - return nb_pkt_fetch

** lgw_reg_rb()

   Point to a register by name and do a burst read.
   函数调用了 lgw_spi_rb() 从 SPI 读入数据
** jit_queue_init(*queue)
   一个 queue 可以存放 32 个（JIT_QUEUE_MAX）node/pkt, 初始化这个空间

   #+BEGIN_SRC C
   struct jit_queue_s {
     uint8_t num_pkt;                /* Total number of packets in the queue (downlinks, beacons...) */
     uint8_t num_beacon;             /* Number of beacons in the queue */
     struct jit_node_s nodes[JIT_QUEUE_MAX]; /* Nodes/packets array in the queue */
   };
   #+END_SRC
** jit_enqueue()
   #+BEGIN_SRC C
   enum jit_error_e jit_enqueue(struct jit_queue_s *queue, struct timeval *time, struct lgw_pkt_tx_s *packet,
                                enum jit_pkt_type_e pkt_type){...}
   #+END_SRC
   1. 在这个入队函数中，会根据入队的packet 类型计算发送延迟：
      #+BEGIN_SRC C
      /* Compute packet pre/post delays depending on packet's type */
      switch (pkt_type) {
          case JIT_PKT_TYPE_DOWNLINK_CLASS_A:
          case JIT_PKT_TYPE_DOWNLINK_CLASS_B:
          case JIT_PKT_TYPE_DOWNLINK_CLASS_C:
              packet_pre_delay = TX_START_DELAY + TX_JIT_DELAY;
              packet_post_delay = lgw_time_on_air(packet) * 1000UL; /* in us */
              break;
          case JIT_PKT_TYPE_BEACON:
              /* As defined in LoRaWAN spec */
              packet_pre_delay = TX_START_DELAY + BEACON_GUARD + TX_JIT_DELAY;
              packet_post_delay = BEACON_RESERVED;
              break;
          default:
              break;
      }
      #+END_SRC
   2. 通过设置 packet->count_us 将  immediate downlink 变为 timestamped downlink "ASAP":
      从[[file:~/Program/IoT/packet_forwarder-master/lora_pkt_fwd/src/jitqueue.c::34][jitqueue.c]] 中可以看出，BEACON_GUARD 有3000秒（50分钟）之长！TX_JIT_DELAY 也有 30000 ms (半分钟)。可见 beacon 的发送间隔是很大的。

      Lora 协议中的几种发射时延，参考[[file:~/Program/IoT/packet_forwarder-master/lora_pkt_fwd/src/jitqueue.c::238][jitqueue.c代码注释]]：
      * Class A: downlink has to be sent in a 1s or 2s time window after RX
      * Class B: downlink has to occur in a 128s time window
      * Class C: no check needed, departure time has been calculated previously
   3. 利用几个准则确保 packet->count_us 的合理性：
      * [[file:~/Program/IoT/packet_forwarder-master/lora_pkt_fwd/src/jitqueue.c::224][criteria_1]] : packet 的时间不能太晚。
      * [[file:~/Program/IoT/packet_forwarder-master/lora_pkt_fwd/src/jitqueue.c::238][criteria_2]] : 满足lora 协议Class A、B、C
      * [[file:~/Program/IoT/packet_forwarder-master/lora_pkt_fwd/src/jitqueue.c::257][criteria_3]] : 不能与已有的 packet 时间重合
   4. 检查通过后，enqueue packet
      从[[file:~/Program/IoT/packet_forwarder-master/lora_pkt_fwd/src/jitqueue.c::306][这里]] 可以看出，beacon 是一种特殊的 packet:
      #+BEGIN_SRC C
      if (pkt_type == JIT_PKT_TYPE_BEACON) {
        queue->num_beacon++;
      }
      queue->num_pkt++;
      #+END_SRC
   5. 将队列中的 packet 按时间戳升序排列
      [[jit_sort_queue(queue)][jit_sort_queue(queue)]]
   6. 打印 jitqueue
      [[jit_print_queue()][jit_print_queue]](queue, false, DEBUG_JIT);
   7. 返回 JIT_ERROR_OK

** jit_dequeue()
   把 pkt 出队列，是当前时刻最满足发射条件的 pkt
** jit_sort_queue(queue)
** jit_print_queue()
** jit_peek()
   完成优先级排序，去除不可能发送的pkt
** send_tx_ack()
* Footnotes

[fn:1] XTAL ― 这应该是跟Lora 协议中 Class B 相关的概念
